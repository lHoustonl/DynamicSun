@page "/ArchiveList"

@using DynamicSun.Integration.Client.Http
@using DynamicSun.Client.Shared.Models
@using DynamicSun.Integration.Client.Http.Models;
@using System.Net;
@using System.Globalization;

@implements IDisposable

@inject IDynamicSunClient ApiClient
@inject ISnackbar Snackbar

<PageTitle>Просмотр архивов погоды</PageTitle>

<MudItem xs="8" sm="8" md="8">
    <MudBreadcrumbs Items="_breadcrumbsItems"></MudBreadcrumbs>
</MudItem>

<MudTable ServerData="@(new Func<TableState, Task<TableData<WeatherArchiveModel>>>(OnLoadItemsAsync))"
          RowsPerPage="25"
          Dense="true"
          Hover="true"
          Bordered="true"
          Striped="true"
          Virtualize="true"
          FixedHeader="true"
          Loading="@_loading"
          LoadingProgressColor="Color.Info"
          @ref="_table">
    <ToolBarContent>
        <MudItem xs="6" sm="3" md="2" Style="margin-right: 15px">
            <MudSelect T="int" Label="Месяц" ValueChanged="@(OnMonthChangedAsync)">
                <MudSelectItem Value="0">Все</MudSelectItem>
                @foreach (KeyValuePair<int, string> month in months)
                {
                    <MudSelectItem Value="@month.Key">@month.Value</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6" sm="3" md="2">
            <MudSelect T="int" Label="Год" ValueChanged="@(OnYearChangedAsync)">
                <MudSelectItem Value="0">Все</MudSelectItem>
                @foreach (int year in years)
                {
                    <MudSelectItem Value="@year">@year</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Дата</MudTh>
        <MudTh>Время (московское)</MudTh>
        <MudTh>Температура воздуха, гр. Ц.</MudTh>
        <MudTh>Относительная влажность воздуха, %</MudTh>
        <MudTh>Точка росы, гр. Ц.</MudTh>
        <MudTh>Атмосферное давление, мм рт.ст.</MudTh>
        <MudTh>Направление ветра</MudTh>
        <MudTh>Скорость ветра, м/с</MudTh>
        <MudTh>Облачность, %</MudTh>
        <MudTh>Нижняя граница облачности, м</MudTh>
        <MudTh>Горизонтальная видимость, км</MudTh>
        <MudTh>Погодные явления</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Date">@context.Date</MudTd>
        <MudTd DataLabel="Time">@context.Time</MudTd>
        <MudTd DataLabel="T">@context.Temperature</MudTd>
        <MudTd DataLabel="Relative Humidity">@context.RelativeHumidity</MudTd>
        <MudTd DataLabel="Td">@context.DewPointTemperature</MudTd>
        <MudTd DataLabel="Atmospheric Pressure">@context.AtmosphericPressure</MudTd>
        <MudTd DataLabel="Wind Direction">@context.WindDirection</MudTd>
        <MudTd DataLabel="Wind Speed">@context.WindSpeed</MudTd>
        <MudTd DataLabel="Cloudiness">@context.Cloudiness</MudTd>
        <MudTd DataLabel="h">@context.CloudBase</MudTd>
        <MudTd DataLabel="VV">@context.Visibility</MudTd>
        <MudTd DataLabel="Weather Phenomena">@context.WeatherPhenomena</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Совпадающих записей не найдено</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Загрузка...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new[] {25, 50, 100}" RowsPerPageString="Строк на страницу" />
    </PagerContent>
</MudTable>

@code {
    private readonly List<BreadcrumbItem> _breadcrumbsItems = new()
    {
        new BreadcrumbItem("ГЛАВНАЯ СТРАНИЦА", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("ПРОСМОТР АРХИВОВ ПОГОДЫ", href: "/ArchiveList", icon: Icons.Material.Filled.Business),
    };

    private MudTable<WeatherArchiveModel> _table = null!;
    private bool _loading = true;

    private int selectedMonth;
    private int selectedYear;

    private IReadOnlyDictionary<int, string> months = new Dictionary<int, string>()
    {
        { 1, "Январь" },
        { 2, "Февраль" },
        { 3, "Март" },
        { 4, "Апрель" },
        { 5, "Май" },
        { 6, "Июнь" },
        { 7, "Июль" },
        { 8, "Август" },
        { 9, "Сентябрь" },
        { 10, "Октябрь" },
        { 11, "Ноябрь" },
        { 12, "Декабрь" }
    };

    public IEnumerable<int> years = new List<int>();

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    private async Task<TableData<WeatherArchiveModel>> OnLoadItemsAsync(TableState state)
    {
        _loading = true;
        try
        {
            var getWeatherArchiveYearsResponce = await ApiClient.GetWeatherArchiveYearsAsync(_cancellationTokenSource.Token);
            if (getWeatherArchiveYearsResponce.StatusCode is HttpStatusCode.OK)
                years = getWeatherArchiveYearsResponce.Content!;

            var response = await ApiClient.GetPagedWeatherArchiveListAsync(new GetPagedAgentsListRequest
            {
                Offset = state.Page * state.PageSize,
                Count = state.PageSize,
                Year = selectedYear,
                Month = selectedMonth
            }, _cancellationTokenSource.Token);

            if (response.StatusCode is HttpStatusCode.OK)
            {
                return new TableData<WeatherArchiveModel>
                {
                    TotalItems = response.Content!.Total,
                    Items = response.Content!.Values.Select(v => new WeatherArchiveModel
                    {
                        Id = v.Id,
                        Date = v.Date,
                        Time = v.Time,
                        Temperature = v.Temperature,
                        RelativeHumidity = v.RelativeHumidity,
                        DewPointTemperature = v.DewPointTemperature,
                        AtmosphericPressure = v.AtmosphericPressure,
                        WindDirection = v.WindDirection,
                        WindSpeed = v.WindSpeed,
                        Cloudiness = v.Cloudiness,
                        CloudBase = v.CloudBase,
                        Visibility = v.Visibility,
                        WeatherPhenomena = v.WeatherPhenomena,
                    })
                };
            }

            Snackbar.Add($"{response.StatusCode}: {response.Error!.Message}", Severity.Error, (options) => { options.CloseAfterNavigation = true; });
        }
        finally
        {
            _loading = false;
        }

        return new TableData<WeatherArchiveModel>
        {
            TotalItems = 0,
            Items = Array.Empty<WeatherArchiveModel>()
        };
    }

    private async Task OnMonthChangedAsync(int month)
    {
        selectedMonth = month;
        await ReloadItemsAsync();
    }

    private async Task OnYearChangedAsync(int year)
    {
        selectedYear = year;
        await ReloadItemsAsync();
    }

    private Task ReloadItemsAsync() => _table.ReloadServerData();

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }
}